1.购物车
  + 添加购物车
  + 展示购物车

2. 资源服务器(微服务) [授权]


3. 数据的动态加载



4. 微服务和微服务之间 (授权)



5. 用户的信息需要获取.



回顾:
	oauth2.0 实现( SSO的登录 和 第三方登录.)


	SSO : 单点登录 : 登录一次,就可以访问 相互信任的系统.


	角色:
		client (itheima.com)

		资源拥有者  (qq的用户)

		资源服务器   qq的后台的用户微服务(查询用户的信息)          各个微服务

		认证服务器   qq的认证服务器				   user-oauth (认证服务器)


	授权模式:
		+ 授权码 模式    ...
		+ 密码模式	 ...
		+ 隐式模式
		+ 客户端认证方式.




	公钥 和 私钥 (非对称的加密方式 RSA)

	公钥加密   私钥解密



 + 客户端的数据(clientid secry ....)写死的,  变成动态的 (client的数据要存储到数据库中)


 + 用户名对应的密码 目前是写死的sztiheima , 要是动态(从数据库中changgou_user 库中 tb_user表获取) 




购物车实现思路:
	+ 用户要添加购物车 需要先登录

	+ 添加购物车的时候 发送请求,传递要买的商品的数据 

	+ 后台接收到请求 数据存储到redis中 (一个用户 一个购物车)    key value 





请求:/cart/add  添加购物车
参数: 商品的SKU的ID  id   购买的数量 num     登录的用户(不需要传递,将来通过springsecurity能获取到当前登录的用户)

返回值:	 result  (true,ok,"添加成功",null)





+ 展示购物车
	请求:/cart/list
	参数:没有 (找当前登录的用户的购物车的列表)
	返回值:Result<List<OrderItem>>




+ hystrix 的策略(模式)
	+ 线程池(壁舱)模式  (默认的)
	+ 信号量模式 (SEMAPHORE)
	+ 熔断器模式 (broker cruite)
	+ 后备模式 (fallback)






	












